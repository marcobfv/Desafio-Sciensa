<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener">
            <summary>
            Base class for creating AspNetCore based communication listener for Service Fabric stateless or stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.ServiceContext">
            <summary>
            The context of the service for which this communication listener is being constructed.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.ConfigureToUseUniqueServiceUrl">
            <summary>
            Configures the listener to use UniqueServiceUrl by appending a urlSuffix PartitionId and ReplicaId.
            It helps in scenarios when ServiceA listening on a node on port X moves and another Service takes its place on the same node and starts using the same port X,
            The UniqueServiceUrl in conjunction with middleware rejects requests meant for serviceA arriving at ServiceB.
            Example:
            Service A is dynamically assigned port 30000 on node with IP 10.0.0.1, it listens on http://+:30000/ and reports to Naming service http://10.0.0.1:30000/serviceName-A/partitionId-A/replicaId-A
            Client resolves URL from NS: http://10.0.0.1:30000/serviceName-A/partitionId-A/replicaId-A and sends a request, Service A compares URL path segments to its own service name, partition ID, replica ID, finds they are equal, serves request.
            Now Service A moves to a different node and Service B comes up at the node with IP 10.0.0.1 and is dynamically assigned port 30000.
            Service B listens on: http://+:30000/ and reports to NS http://10.0.0.1:30000/serviceName-B/partitionId-B/replicaId-B, Client for Service a sends request to http://10.0.0.1:30000/serviceName-A/partitionId-A/replicaId-A
            Service B compares URL path segments to its own service name, partition ID, replica ID, finds they do not match, ends the request and responds with HTTP 410. Client receives 410 and re-resolves for service A.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.UrlSuffix">
            <summary>
            UrlSuffix to be used based on <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions"/> specified in
            <see cref="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostBuilderServiceFabricExtension.UseServiceFabricIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener,Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.#ctor(System.Fabric.ServiceContext,System.Func{System.String,Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener,Microsoft.AspNetCore.Hosting.IWebHost})">
            <summary>
            Constructs a AspNetCore communication listener.
            </summary>
            <param name="serviceContext">The context of the service for which this communication listener is being constructed.</param>
            <param name="build">Delegate to build Microsoft.AspNetCore.Hosting.IWebHost, endpoint url generated by the listener is given as input to this delegate.
            This gives the flexibility to change the url before creating Microsoft.AspNetCore.Hosting.IWebHost if needed.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to be opened. Once the Open
            completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            is endpoint string on which IWebHost is listening.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.GetEndpointResourceDescription(System.String)">
            <summary>
            Retrieves the endpoint resource with a given name from the service manifest.
            </summary>
            <param name="endpointName">The name of the endpoint.</param>
            <returns>The endpoint resource with the specified name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener.GetListenerUrl">
            <summary>
            Gets url for this listener to be used with Web Server.
            </summary>
            <returns>url for this listener to be used with Web Server.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions">
            <summary>
            Integration options for <see cref="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostBuilderServiceFabricExtension.UseServiceFabricIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener,Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions)"/> method when used with Microsoft.AspNetCore.Hosting.IWebHostBuilder.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions.None">
            <summary>
            This option will not configure the <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener"/> to add any suffix to url when providing the url to Service Fabric Runtime from its <see cref="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions.UseUniqueServiceUrl">
            <summary>
            This option will configure the <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener"/> to add a url suffix containing <see cref="P:System.Fabric.ServiceContext.PartitionId"/> and <see cref="P:System.Fabric.ServiceContext.ReplicaOrInstanceId"/>
            to url when providing the url to Service Fabric Runtime from its <see cref="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions.UseReverseProxyIntegration">
            <summary>
            This option will enable the Service Fabric Reverse Proxy integration middleware.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware">
            <summary>
            A middleware to be used with Service Fabric stateful and stateless services hosted in Kestrel or WebListener.
            This middleware examines the Microsoft.AspNetCore.Http.HttpRequest.Path in request to determine if the request is intended for this replica.
            </summary>
            <remarks>
            This middleware when used with Kestrel and WebListener based Service Fabric Communication Listeners allows handling of scenarios when
            the Replica1 listening on Node1 and por11 has moved and another Replica2 is opened on Node1 got Port1. 
            A client which has resolved Replica1 before it moved, will send the request to Node1:Port1. Using this middleware 
            Replica2 can reject calls which were meant for Replica1 by examining the Path in incoming request.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware"/>
            </summary>
            <param name="next">Next request handler in pipeline.</param>
            <param name="urlSuffix"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke.
            </summary>
            <param name="context">Context.</param>
            <returns>Task for the execution by next middleware in pipeline.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddlewareExtensions">
            <summary>
            Extension class to use ServiceFabricKestrelMiddleware for Service Fabric stateful or stateless service
            using Kestrel or WebListener as WebServer.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricMiddlewareExtensions.UseServiceFabricMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)">
            <summary>
            Extension method to use ServiceFabricMiddleware for Service Fabric stateful or stateless service
            using Kestrel or WebListener as WebServer.
            </summary>
            <param name="builder">Microsoft.AspNetCore.Builder.IApplicationBuilder</param>        
            <param name="urlSuffix"></param>
            <returns>Microsoft.AspNetCore.Builder.IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.PathBuilderExtension">
            <summary>
            PathBuilder extension as aspnet core 1.0.0 binaries doesn't have StartsWithSegments() method with an out param for matched string.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddleware">
            <summary>
            A middleware to be used with Service Fabric stateful and stateless services hosted in Kestrel or WebListener.
            This middleware automatically adds X-ServiceFabric ResourceNotFound header, required by the Service Fabric Reverse Proxy, when 404 status code is returned
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddleware"/>
            </summary>
            <param name="next">Next request handler in pipeline.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke.
            </summary>
            <param name="context">Context.</param>
            <returns>Task for the execution by next middleware in pipeline.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddlewareExtensions">
            <summary>
            Extension class to use ServiceFabricReverseProxyIntegrationMiddleware for Service Fabric stateful or stateless service
            using Kestrel or WebListener as WebServer.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricReverseProxyIntegrationMiddlewareExtensions.UseServiceFabricReverseProxyIntegrationMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Extension method to use ServiceFabricReverseProxyIntegrationMiddleware for Service Fabric stateful or stateless service
            using Kestrel or WebListener as WebServer.
            </summary>
            <param name="builder">Microsoft.AspNetCore.Builder.IApplicationBuilder</param>        
            <returns>Microsoft.AspNetCore.Builder.IApplicationBuilder</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR.EndpointNameNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to {0} not found in Service Manifest..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR.ErrorNoUrlFromAspNetCore">
            <summary>
              Looks up a localized string similar to &quot;No Url returned from AspNetCore IServerAddressesFeature..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.AspNetCore.SR.WebHostNullExceptionMessage">
            <summary>
              Looks up a localized string similar to IWebHost returned from build delegate is null..
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostBuilderServiceFabricExtension">
            <summary>
            Class containing Service Fabric related extension methods for Microsoft.AspNetCore.Hosting.IWebHostBuilder
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.AspNetCore.WebHostBuilderServiceFabricExtension.UseServiceFabricIntegration(Microsoft.AspNetCore.Hosting.IWebHostBuilder,Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener,Microsoft.ServiceFabric.Services.Communication.AspNetCore.ServiceFabricIntegrationOptions)">
            <summary>
            Configures the Service to use ServiceFabricMiddleware and tells the listener that middleware is configured for the service so that it can 
            suffix PartitionId and ReplicaOrInstanceId  to url before providing it to Service Fabric Runtime.
            </summary>
            <param name="hostBuilder">The Microsoft.AspNetCore.Hosting.IWebHostBuilder to configure.</param>
            <param name="listener">The <see cref="T:Microsoft.ServiceFabric.Services.Communication.AspNetCore.AspNetCoreCommunicationListener"/> to configure.</param>
            <param name="options">Options to configure ServiceFabricMiddleware and AspNetCoreCommunicationListener</param>
            <returns>The Microsoft.AspNetCore.Hosting.IWebHostBuilder.</returns>
        </member>
    </members>
</doc>
